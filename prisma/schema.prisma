// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int                @id @default(autoincrement())
  name          String             @db.VarChar(100)
  password      String             @db.VarChar(100)
  email         String             @unique @db.VarChar(45)
  role_id       Int
  role          Role               @relation(fields: [role_id], references: [id])
  posts         Post[]
  comments      Comment[]
  subscriptions SubscriptionUser[]
  created_at    DateTime           @default(now())
  updated_at    DateTime           @updatedAt
}

model Role {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(100)
  slug       String   @unique @db.VarChar(45)
  users      User[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Subscription {
  id                    Int                @id @default(autoincrement())
  name                  String             @db.VarChar(100)
  price                 Decimal            @db.Decimal()
  available_posts_count Int
  is_published          Boolean
  users                 SubscriptionUser[]
  created_at            DateTime           @default(now())
  updated_at            DateTime           @updatedAt
}

model SubscriptionUser {
  user_id         Int
  subscription_id Int
  user            User         @relation(fields: [user_id], references: [id])
  subscription    Subscription @relation(fields: [subscription_id], references: [id])
  is_active       Boolean      @default(false)
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt

  @@id([user_id, subscription_id])
}

model Post {
  id         Int       @id @default(autoincrement())
  content    String
  author_id  Int
  author     User      @relation(fields: [author_id], references: [id])
  comments   Comment[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Comment {
  id         Int      @id @default(autoincrement())
  content    String
  author_id  Int
  author     User     @relation(fields: [author_id], references: [id])
  post_id    Int
  post       Post     @relation(fields: [post_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
